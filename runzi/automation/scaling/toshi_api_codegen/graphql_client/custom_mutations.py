# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from . import FileRole, SmsFileType
from .custom_fields import (
    AppendInversionSolutionTablesPayloadFields,
    CreateAggregateInversionSolutionPayloadFields,
    CreateAutomationTaskFields,
    CreateFileFields,
    CreateFileRelationFields,
    CreateGeneralTaskPayloadFields,
    CreateInversionSolutionNrmlPayloadFields,
    CreateInversionSolutionPayloadFields,
    CreateOpenquakeHazardConfigPayloadFields,
    CreateOpenquakeHazardSolutionPayloadFields,
    CreateOpenquakeHazardTaskFields,
    CreateRuptureGenerationTaskFields,
    CreateScaledInversionSolutionPayloadFields,
    CreateSmsFileFields,
    CreateStrongMotionStationPayloadFields,
    CreateTablePayloadFields,
    CreateTaskTaskRelationFields,
    CreateTimeDependentInversionSolutionPayloadFields,
    UpdateAutomationTaskFields,
    UpdateGeneralTaskPayloadFields,
    UpdateOpenquakeHazardTaskFields,
    UpdateRuptureGenerationTaskFields,
)
from .input_types import (
    AppendInversionSolutionTablesInput,
    AutomationTaskInput,
    AutomationTaskUpdateInput,
    CreateAggregateInversionSolutionInput,
    CreateGeneralTaskInput,
    CreateInversionSolutionInput,
    CreateInversionSolutionNrmlInput,
    CreateOpenquakeHazardConfigInput,
    CreateOpenquakeHazardSolutionInput,
    CreateScaledInversionSolutionInput,
    CreateStrongMotionStationInput,
    CreateTableInput,
    CreateTimeDependentInversionSolutionInput,
    KeyValuePairInput,
    NewAutomationTaskInput,
    OpenquakeHazardTaskInput,
    OpenquakeHazardTaskUpdateInput,
    PredecessorInput,
    UpdateGeneralTaskInput,
)


class Mutation:
    @classmethod
    def append_inversion_solution_tables(
        cls, input: AppendInversionSolutionTablesInput
    ) -> AppendInversionSolutionTablesPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AppendInversionSolutionTablesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AppendInversionSolutionTablesPayloadFields(
            field_name="append_inversion_solution_tables", arguments=cleared_arguments
        )

    @classmethod
    def create_automation_task(
        cls, input: NewAutomationTaskInput
    ) -> CreateAutomationTaskFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "NewAutomationTaskInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAutomationTaskFields(
            field_name="create_automation_task", arguments=cleared_arguments
        )

    @classmethod
    def create_file(
        cls,
        *,
        file_name: Optional[str] = None,
        file_size: Optional[Any] = None,
        md_5_digest: Optional[str] = None,
        meta: Optional[KeyValuePairInput] = None,
        predecessors: Optional[PredecessorInput] = None
    ) -> CreateFileFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "file_name": {"type": "String", "value": file_name},
            "file_size": {"type": "BigInt", "value": file_size},
            "md5_digest": {"type": "String", "value": md_5_digest},
            "meta": {"type": "KeyValuePairInput", "value": meta},
            "predecessors": {"type": "PredecessorInput", "value": predecessors},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateFileFields(field_name="create_file", arguments=cleared_arguments)

    @classmethod
    def create_file_relation(
        cls, file_id: str, role: FileRole, thing_id: str
    ) -> CreateFileRelationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "file_id": {"type": "ID!", "value": file_id},
            "role": {"type": "FileRole!", "value": role},
            "thing_id": {"type": "ID!", "value": thing_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateFileRelationFields(
            field_name="create_file_relation", arguments=cleared_arguments
        )

    @classmethod
    def create_general_task(
        cls, input: CreateGeneralTaskInput
    ) -> CreateGeneralTaskPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateGeneralTaskInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateGeneralTaskPayloadFields(
            field_name="create_general_task", arguments=cleared_arguments
        )

    @classmethod
    def create_inversion_solution(
        cls, input: CreateInversionSolutionInput
    ) -> CreateInversionSolutionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateInversionSolutionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateInversionSolutionPayloadFields(
            field_name="create_inversion_solution", arguments=cleared_arguments
        )

    @classmethod
    def create_rupture_generation_task(
        cls, input: AutomationTaskInput
    ) -> CreateRuptureGenerationTaskFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AutomationTaskInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateRuptureGenerationTaskFields(
            field_name="create_rupture_generation_task", arguments=cleared_arguments
        )

    @classmethod
    def create_sms_file(
        cls,
        file_type: SmsFileType,
        *,
        file_name: Optional[str] = None,
        file_size: Optional[Any] = None,
        md_5_digest: Optional[str] = None
    ) -> CreateSmsFileFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "file_name": {"type": "String", "value": file_name},
            "file_size": {"type": "BigInt", "value": file_size},
            "file_type": {"type": "SmsFileType!", "value": file_type},
            "md5_digest": {"type": "String", "value": md_5_digest},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSmsFileFields(
            field_name="create_sms_file", arguments=cleared_arguments
        )

    @classmethod
    def create_strong_motion_station(
        cls, input: CreateStrongMotionStationInput
    ) -> CreateStrongMotionStationPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateStrongMotionStationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateStrongMotionStationPayloadFields(
            field_name="create_strong_motion_station", arguments=cleared_arguments
        )

    @classmethod
    def create_table(cls, input: CreateTableInput) -> CreateTablePayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTableInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTablePayloadFields(
            field_name="create_table", arguments=cleared_arguments
        )

    @classmethod
    def create_task_relation(
        cls, child_id: str, parent_id: str
    ) -> CreateTaskTaskRelationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "child_id": {"type": "ID!", "value": child_id},
            "parent_id": {"type": "ID!", "value": parent_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTaskTaskRelationFields(
            field_name="create_task_relation", arguments=cleared_arguments
        )

    @classmethod
    def update_automation_task(
        cls, input: AutomationTaskUpdateInput
    ) -> UpdateAutomationTaskFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AutomationTaskUpdateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateAutomationTaskFields(
            field_name="update_automation_task", arguments=cleared_arguments
        )

    @classmethod
    def update_general_task(
        cls, input: UpdateGeneralTaskInput
    ) -> UpdateGeneralTaskPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateGeneralTaskInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateGeneralTaskPayloadFields(
            field_name="update_general_task", arguments=cleared_arguments
        )

    @classmethod
    def update_rupture_generation_task(
        cls, input: AutomationTaskUpdateInput
    ) -> UpdateRuptureGenerationTaskFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AutomationTaskUpdateInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateRuptureGenerationTaskFields(
            field_name="update_rupture_generation_task", arguments=cleared_arguments
        )

    @classmethod
    def create_aggregate_inversion_solution(
        cls, input: CreateAggregateInversionSolutionInput
    ) -> CreateAggregateInversionSolutionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateAggregateInversionSolutionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAggregateInversionSolutionPayloadFields(
            field_name="create_aggregate_inversion_solution",
            arguments=cleared_arguments,
        )

    @classmethod
    def create_scaled_inversion_solution(
        cls, input: CreateScaledInversionSolutionInput
    ) -> CreateScaledInversionSolutionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateScaledInversionSolutionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateScaledInversionSolutionPayloadFields(
            field_name="create_scaled_inversion_solution", arguments=cleared_arguments
        )

    @classmethod
    def create_time_dependent_inversion_solution(
        cls, input: CreateTimeDependentInversionSolutionInput
    ) -> CreateTimeDependentInversionSolutionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "CreateTimeDependentInversionSolutionInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTimeDependentInversionSolutionPayloadFields(
            field_name="create_time_dependent_inversion_solution",
            arguments=cleared_arguments,
        )

    @classmethod
    def create_inversion_solution_nrml(
        cls, input: CreateInversionSolutionNrmlInput
    ) -> CreateInversionSolutionNrmlPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateInversionSolutionNrmlInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateInversionSolutionNrmlPayloadFields(
            field_name="create_inversion_solution_nrml", arguments=cleared_arguments
        )

    @classmethod
    def create_openquake_hazard_solution(
        cls, input: CreateOpenquakeHazardSolutionInput
    ) -> CreateOpenquakeHazardSolutionPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateOpenquakeHazardSolutionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateOpenquakeHazardSolutionPayloadFields(
            field_name="create_openquake_hazard_solution", arguments=cleared_arguments
        )

    @classmethod
    def create_openquake_hazard_config(
        cls, input: CreateOpenquakeHazardConfigInput
    ) -> CreateOpenquakeHazardConfigPayloadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateOpenquakeHazardConfigInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateOpenquakeHazardConfigPayloadFields(
            field_name="create_openquake_hazard_config", arguments=cleared_arguments
        )

    @classmethod
    def create_openquake_hazard_task(
        cls, input: OpenquakeHazardTaskInput
    ) -> CreateOpenquakeHazardTaskFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "OpenquakeHazardTaskInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateOpenquakeHazardTaskFields(
            field_name="create_openquake_hazard_task", arguments=cleared_arguments
        )

    @classmethod
    def update_openquake_hazard_task(
        cls, *, input: Optional[OpenquakeHazardTaskUpdateInput] = None
    ) -> UpdateOpenquakeHazardTaskFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "OpenquakeHazardTaskUpdateInput", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateOpenquakeHazardTaskFields(
            field_name="update_openquake_hazard_task", arguments=cleared_arguments
        )
