# Generated by ariadne-codegen
# Source: runzi/automation/scaling/toshi_api_codegen/queries.graphql

from typing import Any, Dict, List, Tuple

from graphql import (
    DocumentNode,
    NamedTypeNode,
    NameNode,
    OperationDefinitionNode,
    OperationType,
    SelectionNode,
    SelectionSetNode,
    VariableDefinitionNode,
    VariableNode,
    print_ast,
)

from .async_base_client import AsyncBaseClient
from .base_operation import GraphQLField
from .create_general_task import CreateGeneralTask
from .enums import ModelType, TaskSubType
from .get_file_detail import GetFileDetail
from .input_types import KeyValueListPairInput, KeyValuePairInput
from .update_subtask_count import UpdateSubtaskCount


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def create_general_task(
        self,
        created: Any,
        agent_name: str,
        title: str,
        description: str,
        argument_lists: List[KeyValueListPairInput],
        subtask_type: TaskSubType,
        subtask_count: int,
        model_type: ModelType,
        meta: List[KeyValuePairInput],
        **kwargs: Any
    ) -> CreateGeneralTask:
        query = gql(
            """
            mutation CreateGeneralTask($created: DateTime!, $agent_name: String!, $title: String!, $description: String!, $argument_lists: [KeyValueListPairInput]!, $subtask_type: TaskSubType!, $subtask_count: Int!, $model_type: ModelType!, $meta: [KeyValuePairInput]!) {
              create_general_task(
                input: {created: $created, agent_name: $agent_name, title: $title, description: $description, argument_lists: $argument_lists, subtask_type: $subtask_type, subtask_count: $subtask_count, model_type: $model_type, meta: $meta}
              ) {
                general_task {
                  id
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "created": created,
            "agent_name": agent_name,
            "title": title,
            "description": description,
            "argument_lists": argument_lists,
            "subtask_type": subtask_type,
            "subtask_count": subtask_count,
            "model_type": model_type,
            "meta": meta,
        }
        response = await self.execute(
            query=query,
            operation_name="CreateGeneralTask",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGeneralTask.model_validate(data)

    async def update_subtask_count(
        self, task_id: str, subtask_count: int, **kwargs: Any
    ) -> UpdateSubtaskCount:
        query = gql(
            """
            mutation update_subtask_count($task_id: ID!, $subtask_count: Int!) {
              update_general_task(input: {task_id: $task_id, subtask_count: $subtask_count}) {
                ok
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "task_id": task_id,
            "subtask_count": subtask_count,
        }
        response = await self.execute(
            query=query,
            operation_name="update_subtask_count",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSubtaskCount.model_validate(data)

    async def get_file_detail(self, id: str, **kwargs: Any) -> GetFileDetail:
        query = gql(
            """
            query get_file_detail($id: ID!) {
              node(id: $id) {
                __typename
                ... on FileInterface {
                  file_name
                  file_size
                  meta {
                    k
                    v
                  }
                  file_url
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="get_file_detail", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetFileDetail.model_validate(data)

    async def execute_custom_operation(
        self, *fields: GraphQLField, operation_type: OperationType, operation_name: str
    ) -> Dict[str, Any]:
        selections = self._build_selection_set(fields)
        combined_variables = self._combine_variables(fields)
        variable_definitions = self._build_variable_definitions(
            combined_variables["types"]
        )
        operation_ast = self._build_operation_ast(
            selections, operation_type, operation_name, variable_definitions
        )
        response = await self.execute(
            print_ast(operation_ast),
            variables=combined_variables["values"],
            operation_name=operation_name,
        )
        return self.get_data(response)

    def _combine_variables(
        self, fields: Tuple[GraphQLField, ...]
    ) -> Dict[str, Dict[str, Any]]:
        variables_types_combined = {}
        processed_variables_combined = {}
        for field in fields:
            formatted_variables = field.get_formatted_variables()
            variables_types_combined.update(
                {k: v["type"] for k, v in formatted_variables.items()}
            )
            processed_variables_combined.update(
                {k: v["value"] for k, v in formatted_variables.items()}
            )
        return {
            "types": variables_types_combined,
            "values": processed_variables_combined,
        }

    def _build_variable_definitions(
        self, variables_types_combined: Dict[str, str]
    ) -> List[VariableDefinitionNode]:
        return [
            VariableDefinitionNode(
                variable=VariableNode(name=NameNode(value=var_name)),
                type=NamedTypeNode(name=NameNode(value=var_value)),
            )
            for var_name, var_value in variables_types_combined.items()
        ]

    def _build_operation_ast(
        self,
        selections: List[SelectionNode],
        operation_type: OperationType,
        operation_name: str,
        variable_definitions: List[VariableDefinitionNode],
    ) -> DocumentNode:
        return DocumentNode(
            definitions=[
                OperationDefinitionNode(
                    operation=operation_type,
                    name=NameNode(value=operation_name),
                    variable_definitions=variable_definitions,
                    selection_set=SelectionSetNode(selections=selections),
                )
            ]
        )

    def _build_selection_set(
        self, fields: Tuple[GraphQLField, ...]
    ) -> List[SelectionNode]:
        return [field.to_ast(idx) for idx, field in enumerate(fields)]

    async def query(self, *fields: GraphQLField, operation_name: str) -> Dict[str, Any]:
        return await self.execute_custom_operation(
            *fields, operation_type=OperationType.QUERY, operation_name=operation_name
        )

    async def mutation(
        self, *fields: GraphQLField, operation_name: str
    ) -> Dict[str, Any]:
        return await self.execute_custom_operation(
            *fields,
            operation_type=OperationType.MUTATION,
            operation_name=operation_name
        )
