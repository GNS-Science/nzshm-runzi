# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    FileConnectionFields,
    NodeFilterFields,
    NodeInterface,
    ObjectIdentitiesConnectionFields,
    RuptureGenerationTaskConnectionFields,
    SearchFields,
    StrongMotionStationConnectionFields,
    StrongMotionStationFields,
)
from .custom_typing_fields import GraphQLField


class Query:
    @classmethod
    def about(cls) -> GraphQLField:
        return GraphQLField(field_name="about")

    @classmethod
    def version(cls) -> GraphQLField:
        return GraphQLField(field_name="version")

    @classmethod
    def rupture_generation_tasks(
        cls,
        *,
        before: Optional[str] = None,
        after: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> RuptureGenerationTaskConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "before": {"type": "String", "value": before},
            "after": {"type": "String", "value": after},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RuptureGenerationTaskConnectionFields(
            field_name="rupture_generation_tasks", arguments=cleared_arguments
        )

    @classmethod
    def files(
        cls,
        *,
        before: Optional[str] = None,
        after: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> FileConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "before": {"type": "String", "value": before},
            "after": {"type": "String", "value": after},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FileConnectionFields(field_name="files", arguments=cleared_arguments)

    @classmethod
    def node(cls, id: str) -> NodeInterface:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "ID!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NodeInterface(field_name="node", arguments=cleared_arguments)

    @classmethod
    def nodes(cls, *, id_in: Optional[str] = None) -> NodeFilterFields:
        arguments: Dict[str, Dict[str, Any]] = {"id_in": {"type": "ID", "value": id_in}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NodeFilterFields(field_name="nodes", arguments=cleared_arguments)

    @classmethod
    def reindex(cls, *, id_in: Optional[str] = None) -> NodeFilterFields:
        arguments: Dict[str, Dict[str, Any]] = {"id_in": {"type": "ID", "value": id_in}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return NodeFilterFields(field_name="reindex", arguments=cleared_arguments)

    @classmethod
    def search(cls, *, search_term: Optional[str] = None) -> SearchFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "search_term": {"type": "String", "value": search_term}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SearchFields(field_name="search", arguments=cleared_arguments)

    @classmethod
    def object_identities(
        cls,
        *,
        object_type: Optional[str] = None,
        before: Optional[str] = None,
        after: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> ObjectIdentitiesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "object_type": {"type": "String", "value": object_type},
            "before": {"type": "String", "value": before},
            "after": {"type": "String", "value": after},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObjectIdentitiesConnectionFields(
            field_name="object_identities", arguments=cleared_arguments
        )

    @classmethod
    def legacy_object_identities(
        cls,
        *,
        store_type: Optional[str] = None,
        before: Optional[str] = None,
        after: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> ObjectIdentitiesConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "store_type": {"type": "String", "value": store_type},
            "before": {"type": "String", "value": before},
            "after": {"type": "String", "value": after},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ObjectIdentitiesConnectionFields(
            field_name="legacy_object_identities", arguments=cleared_arguments
        )

    @classmethod
    def strong_motion_station(cls, id: str) -> StrongMotionStationFields:
        arguments: Dict[str, Dict[str, Any]] = {"id": {"type": "ID!", "value": id}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StrongMotionStationFields(
            field_name="strong_motion_station", arguments=cleared_arguments
        )

    @classmethod
    def strong_motion_stations(
        cls,
        *,
        before: Optional[str] = None,
        after: Optional[str] = None,
        first: Optional[int] = None,
        last: Optional[int] = None
    ) -> StrongMotionStationConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "before": {"type": "String", "value": before},
            "after": {"type": "String", "value": after},
            "first": {"type": "Int", "value": first},
            "last": {"type": "Int", "value": last},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StrongMotionStationConnectionFields(
            field_name="strong_motion_stations", arguments=cleared_arguments
        )
