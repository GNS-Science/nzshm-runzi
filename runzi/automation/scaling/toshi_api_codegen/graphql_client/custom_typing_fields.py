# Generated by ariadne-codegen

from .base_operation import GraphQLField


class AggregateInversionSolutionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AggregateInversionSolutionGraphQLField":
        self._alias = alias
        return self


class AppendInversionSolutionTablesPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AppendInversionSolutionTablesPayloadGraphQLField":
        self._alias = alias
        return self


class AutomationTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AutomationTaskGraphQLField":
        self._alias = alias
        return self


class AutomationTaskInterfaceGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "AutomationTaskInterfaceGraphQLField":
        self._alias = alias
        return self


class AutomationTaskUnionUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "AutomationTaskUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "AutomationTaskUnionUnion":
        self._alias = alias
        return self


class ChildTaskUnionUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "ChildTaskUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "ChildTaskUnionUnion":
        self._alias = alias
        return self


class CreateAggregateInversionSolutionPayloadGraphQLField(GraphQLField):
    def alias(
        self, alias: str
    ) -> "CreateAggregateInversionSolutionPayloadGraphQLField":
        self._alias = alias
        return self


class CreateAutomationTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateAutomationTaskGraphQLField":
        self._alias = alias
        return self


class CreateFileGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateFileGraphQLField":
        self._alias = alias
        return self


class CreateFileRelationGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateFileRelationGraphQLField":
        self._alias = alias
        return self


class CreateGeneralTaskPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateGeneralTaskPayloadGraphQLField":
        self._alias = alias
        return self


class CreateInversionSolutionNrmlPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateInversionSolutionNrmlPayloadGraphQLField":
        self._alias = alias
        return self


class CreateInversionSolutionPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateInversionSolutionPayloadGraphQLField":
        self._alias = alias
        return self


class CreateOpenquakeHazardConfigPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateOpenquakeHazardConfigPayloadGraphQLField":
        self._alias = alias
        return self


class CreateOpenquakeHazardSolutionPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateOpenquakeHazardSolutionPayloadGraphQLField":
        self._alias = alias
        return self


class CreateOpenquakeHazardTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateOpenquakeHazardTaskGraphQLField":
        self._alias = alias
        return self


class CreateRuptureGenerationTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateRuptureGenerationTaskGraphQLField":
        self._alias = alias
        return self


class CreateScaledInversionSolutionPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateScaledInversionSolutionPayloadGraphQLField":
        self._alias = alias
        return self


class CreateSmsFileGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateSmsFileGraphQLField":
        self._alias = alias
        return self


class CreateStrongMotionStationPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateStrongMotionStationPayloadGraphQLField":
        self._alias = alias
        return self


class CreateTablePayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateTablePayloadGraphQLField":
        self._alias = alias
        return self


class CreateTaskTaskRelationGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "CreateTaskTaskRelationGraphQLField":
        self._alias = alias
        return self


class CreateTimeDependentInversionSolutionPayloadGraphQLField(GraphQLField):
    def alias(
        self, alias: str
    ) -> "CreateTimeDependentInversionSolutionPayloadGraphQLField":
        self._alias = alias
        return self


class FileGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileGraphQLField":
        self._alias = alias
        return self


class FileConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileConnectionGraphQLField":
        self._alias = alias
        return self


class FileEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileEdgeGraphQLField":
        self._alias = alias
        return self


class FileInterfaceGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileInterfaceGraphQLField":
        self._alias = alias
        return self


class FileRelationGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileRelationGraphQLField":
        self._alias = alias
        return self


class FileRelationConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileRelationConnectionGraphQLField":
        self._alias = alias
        return self


class FileRelationEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "FileRelationEdgeGraphQLField":
        self._alias = alias
        return self


class FileUnionUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "FileUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "FileUnionUnion":
        self._alias = alias
        return self


class GeneralTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "GeneralTaskGraphQLField":
        self._alias = alias
        return self


class InversionSolutionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "InversionSolutionGraphQLField":
        self._alias = alias
        return self


class InversionSolutionInterfaceGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "InversionSolutionInterfaceGraphQLField":
        self._alias = alias
        return self


class InversionSolutionNrmlGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "InversionSolutionNrmlGraphQLField":
        self._alias = alias
        return self


class InversionSolutionUnionUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "InversionSolutionUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "InversionSolutionUnionUnion":
        self._alias = alias
        return self


class KeyValueListPairGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "KeyValueListPairGraphQLField":
        self._alias = alias
        return self


class KeyValuePairGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "KeyValuePairGraphQLField":
        self._alias = alias
        return self


class LabelledTableRelationGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "LabelledTableRelationGraphQLField":
        self._alias = alias
        return self


class MutationRootGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "MutationRootGraphQLField":
        self._alias = alias
        return self


class NodeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeGraphQLField":
        self._alias = alias
        return self


class NodeFilterGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "NodeFilterGraphQLField":
        self._alias = alias
        return self


class ObjectIdentitiesConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ObjectIdentitiesConnectionGraphQLField":
        self._alias = alias
        return self


class ObjectIdentitiesEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ObjectIdentitiesEdgeGraphQLField":
        self._alias = alias
        return self


class ObjectIdentityGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ObjectIdentityGraphQLField":
        self._alias = alias
        return self


class OpenquakeHazardConfigGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "OpenquakeHazardConfigGraphQLField":
        self._alias = alias
        return self


class OpenquakeHazardSolutionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "OpenquakeHazardSolutionGraphQLField":
        self._alias = alias
        return self


class OpenquakeHazardTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "OpenquakeHazardTaskGraphQLField":
        self._alias = alias
        return self


class OpenquakeNrmlUnionUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "OpenquakeNrmlUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "OpenquakeNrmlUnionUnion":
        self._alias = alias
        return self


class PageInfoGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PageInfoGraphQLField":
        self._alias = alias
        return self


class PredecessorGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PredecessorGraphQLField":
        self._alias = alias
        return self


class PredecessorsInterfaceGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "PredecessorsInterfaceGraphQLField":
        self._alias = alias
        return self


class PredecessorUnionUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "PredecessorUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "PredecessorUnionUnion":
        self._alias = alias
        return self


class QueryRootGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "QueryRootGraphQLField":
        self._alias = alias
        return self


class RuptureGenerationTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "RuptureGenerationTaskGraphQLField":
        self._alias = alias
        return self


class RuptureGenerationTaskConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "RuptureGenerationTaskConnectionGraphQLField":
        self._alias = alias
        return self


class RuptureGenerationTaskEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "RuptureGenerationTaskEdgeGraphQLField":
        self._alias = alias
        return self


class ScaledInversionSolutionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ScaledInversionSolutionGraphQLField":
        self._alias = alias
        return self


class SearchGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "SearchGraphQLField":
        self._alias = alias
        return self


class SearchResultUnion(GraphQLField):
    def on(self, type_name: str, *subfields: GraphQLField) -> "SearchResultUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "SearchResultUnion":
        self._alias = alias
        return self


class SearchResultConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "SearchResultConnectionGraphQLField":
        self._alias = alias
        return self


class SearchResultEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "SearchResultEdgeGraphQLField":
        self._alias = alias
        return self


class SmsFileGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "SmsFileGraphQLField":
        self._alias = alias
        return self


class SourceSolutionUnionUnion(GraphQLField):
    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "SourceSolutionUnionUnion":
        self._inline_fragments[type_name] = subfields
        return self

    def alias(self, alias: str) -> "SourceSolutionUnionUnion":
        self._alias = alias
        return self


class StrongMotionStationGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "StrongMotionStationGraphQLField":
        self._alias = alias
        return self


class StrongMotionStationConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "StrongMotionStationConnectionGraphQLField":
        self._alias = alias
        return self


class StrongMotionStationEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "StrongMotionStationEdgeGraphQLField":
        self._alias = alias
        return self


class TableGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TableGraphQLField":
        self._alias = alias
        return self


class TaskTaskRelationGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TaskTaskRelationGraphQLField":
        self._alias = alias
        return self


class TaskTaskRelationConnectionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TaskTaskRelationConnectionGraphQLField":
        self._alias = alias
        return self


class TaskTaskRelationEdgeGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TaskTaskRelationEdgeGraphQLField":
        self._alias = alias
        return self


class ThingGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "ThingGraphQLField":
        self._alias = alias
        return self


class TimeDependentInversionSolutionGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "TimeDependentInversionSolutionGraphQLField":
        self._alias = alias
        return self


class UpdateAutomationTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateAutomationTaskGraphQLField":
        self._alias = alias
        return self


class UpdateGeneralTaskPayloadGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateGeneralTaskPayloadGraphQLField":
        self._alias = alias
        return self


class UpdateOpenquakeHazardTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateOpenquakeHazardTaskGraphQLField":
        self._alias = alias
        return self


class UpdateRuptureGenerationTaskGraphQLField(GraphQLField):
    def alias(self, alias: str) -> "UpdateRuptureGenerationTaskGraphQLField":
        self._alias = alias
        return self
